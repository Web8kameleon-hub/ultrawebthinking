/**
 * Bërthama Qendrore e AGI (Artificial General Intelligence)
 * Version Kristal - E pastër, e modulare dhe e tipizuar mirë
 */

import { initializeMind } from "./mind";
import { processInput } from "./sense";
import { generateResponse } from "./response";
import { planNextSteps } from "./planner";
import { monitor } from "./monitor";
import { Low, JSONFile } from "lowdb";
import { MindState, AGIConfig, ProcessedInput, ExecutionPlan } from "../types/agi.types";

// Konfigurimi i tipizuar për bazën e të dhënave
interface AGIMemory {
  state: MindState;
  context: Record<string, any>;
  lastUpdated: Date;
}

// Klasa kryesore e AGI-së me tipizim rigoroz
export class AGICore {
  private db: Low<AGIMemory>;
  private config: AGIConfig;

  constructor(config?: Partial<AGIConfig>) {
    this.config = {
      memoryPath: "memory.json",
      logLevel: "info",
      ...config
    };

    const adapter = new JSONFile<AGIMemory>(this.config.memoryPath);
    this.db = new Low(adapter);
  }

  /**
   * Metoda kryesore e ekzekutimit të AGI-së
   * @param input - Hyrja e përdoruesit
   * @returns Promise<string> - Përgjigja e gjeneruar
   */
  async run(input: string): Promise<string> {
    try {
      monitor.log("🔍 AGI fillon përpunimin...", "info", { input });

      // Faza 1: Inicializimi dhe leximi i të dhënave
      await this.initializeDatabase();

      // Faza 2: Përpunimi i inputit
      const sensed = await this.processInput(input);

      // Faza 3: Inicializimi i mendjes
      const state = await this.initializeMindState(sensed);

      // Faza 4: Planifikimi
      const plan = await this.createExecutionPlan(state);

      // Faza 5: Gjenerimi i përgjigjes
      const output = await this.generateFinalResponse(state, plan);

      // Faza 6: Ruajtja e gjendjes
      await this.persistState(state);

      monitor.log("✅ AGI përfundoi përpunimin.", "info");
      return output;
    } catch (error) {
      monitor.log(`❌ Gabim kritik në AGICore: ${error.message}`, "error", { error });
      throw new AGIExecutionError("Përpunimi dështoi", { cause: error });
    }
  }

  // Metoda ndihmëse për inicializimin e bazës së të dhënave
  private async initializeDatabase(): Promise<void> {
    await monitor.monitorExecution("db.read", async () => {
      await this.db.read();
      if (!this.db.data) {
        this.db.data = {
          state: {} as MindState,
          context: {},
          lastUpdated: new Date()
        };
        await this.db.write();
      }
    });
  }

  // Metoda ndihmëse për përpunimin e inputit
  private async processInput(input: string): Promise<ProcessedInput> {
    return monitor.monitorExecution("processInput", async () => {
      const processed = await processInput(input);
      monitor.log(`📥 Input i përpunuar: ${JSON.stringify(processed)}`, "debug");
      return processed;
    });
  }

  // Metoda ndihmëse për inicializimin e gjendjes së mendjes
  private async initializeMindState(sensed: ProcessedInput): Promise<MindState> {
    return monitor.monitorExecution("initializeMind", async () => {
      const state = await initializeMind(this.db.data!.state, sensed);
      monitor.log(`🧠 Gjendja e mendjes: ${JSON.stringify(state)}`, "debug");
      return state;
    });
  }

  // Metoda ndihmëse për krijimin e planit të ekzekutimit
  private async createExecutionPlan(state: MindState): Promise<ExecutionPlan> {
    return monitor.monitorExecution("planNextSteps", async () => {
      const plan = await planNextSteps(state);
      monitor.log(`📋 Plani i krijuar: ${JSON.stringify(plan)}`, "debug");
      return plan;
    });
  }

  // Metoda ndihmëse për gjenerimin e përgjigjes finale
  private async generateFinalResponse(state: MindState, plan: ExecutionPlan): Promise<string> {
    return monitor.monitorExecution("generateResponse", async () => {
      const output = await generateResponse(state, plan);
      monitor.log(`💬 Përgjigja e gjeneruar: ${output}`, "info");
      return output;
    });
  }

  // Metoda ndihmëse për ruajtjen e gjendjes
  private async persistState(state: MindState): Promise<void> {
    await monitor.monitorExecution("db.write", async () => {
      this.db.data = {
        ...this.db.data!,
        state,
        lastUpdated: new Date()
      };
      await this.db.write();
    });
  }
}

// Klasë e personalizuar e gabimeve për AGI
class AGIExecutionError extends Error {
  constructor(message: string, options?: ErrorOptions) {
    super(message, options);
    this.name = "AGIExecutionError";
  }
}