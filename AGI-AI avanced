const tf = require('@tensorflow/tfjs-node');
const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const redis = require('redis');
const bodyParser = require('body-parser');

const app = express();
const port = 8000;
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });
const redisClient = redis.createClient(); // Redis për caching të shpejtë

app.use(bodyParser.json());

let cachedModel = null; // Ruajtja e modelit në memorie

// **1️⃣ Inicimi i Modelit të AGI**
const loadModel = async () => {
    if (cachedModel) {
        console.log("⚡ Po përdoret modeli i cache-uar!");
        return cachedModel;
    }

    console.log("🚀 Po ngarkohet modeli AGI...");
    cachedModel = await tf.loadLayersModel('file://path/to/your/model/model.json');
    console.log("✅ Modeli i ngarkuar me sukses!");
    return cachedModel;
};

// **2️⃣ Funksioni për të bërë parashikime AI në kohë reale**
const makePrediction = async (model, inputData) => {
    const inputTensor = tf.tensor2d([inputData]);
    const prediction = model.predict(inputTensor);
    return prediction.dataSync();
};

// **3️⃣ Inteligjencë Evolutive – AGI që mëson dhe përshtatet**
const trainModel = async (model, trainingData, labels) => {
    const xs = tf.tensor2d(trainingData);
    const ys = tf.tensor2d(labels);
    
    await model.fit(xs, ys, {
        epochs: 15, // Rritja e epokave për mësim më të thelluar
        callbacks: {
            onEpochEnd: (epoch, logs) => console.log(`🔄 Epoch ${epoch}: Loss = ${logs.loss}`)
        }
    });

    console.log("🧠 Modeli AGI është trajnuar dhe optimizuar!");
    cachedModel = model; // Përditëso modelin në cache
};

// **4️⃣ Endpoint API për AGI**
app.get('/predict', async (req, res) => {
    const model = await loadModel();
    const inputData = req.query.input.split(',').map(parseFloat); // Lejon më shumë se një input
    const cacheKey = `prediction:${inputData.join(',')}`;

    // Kontrollo në Redis nëse ky parashikim ekziston
    redisClient.get(cacheKey, async (err, cachedData) => {
        if (cachedData) {
            console.log("⚡ Parashikimi u kthye nga cache!");
            return res.json({ prediction: JSON.parse(cachedData) });
        }

        const prediction = await makePrediction(model, inputData);
        redisClient.setex(cacheKey, 60, JSON.stringify(prediction)); // Ruaje në cache për 60 sekonda
        res.json({ prediction });
    });
});

// **5️⃣ WebSocket për komunikim ultra të shpejtë**
wss.on('connection', async (ws) => {
    console.log("🔗 Klient i lidhur me AGI!");

    ws.on('message', async (message) => {
        const model = await loadModel();
        const inputData = JSON.parse(message);
        const prediction = await makePrediction(model, inputData);

        ws.send(JSON.stringify({ prediction }));
    });

    ws.on('close', () => console.log("❌ Klienti u shkëput!"));
});

// **6️⃣ Auto-trajnim për AGI me të dhëna të reja nga përdoruesit**
app.post('/train', async (req, res) => {
    const { trainingData, labels } = req.body;
    const model = await loadModel();

    await trainModel(model, trainingData, labels);
    res.json({ message: "🧠 Modeli u përditësua me sukses!" });
});

// **7️⃣ Nisja e serverit**
server.listen(port, () => {
    console.log(`🚀 AGI Web8 po dëgjon në portin ${port}!`);
});