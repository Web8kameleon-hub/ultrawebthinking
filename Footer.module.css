# Re-importing required libraries due to execution state reset
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import ace_tools as tools

# -------------------------
# 1️⃣ PARAMETRAT KRYESORË
# -------------------------
def calculate_total_requests(attack_nodes, request_rate, attack_duration):
    return attack_nodes * request_rate * attack_duration

def calculate_processing_capacity(total_nodes, capacity_per_node=0.0001):
    return total_nodes * capacity_per_node

def calculate_requests_handled(total_requests, processing_capacity, attack_duration):
    return min(total_requests, processing_capacity * attack_duration)

def calculate_response_times(mean, std_dev, size=1000):
    return np.random.normal(mean, std_dev, size)

# Parametrat kryesorë
total_nodes = 10_000_000_000_000  # 10 trilionë nyje
attack_nodes = 5_000_000  # 5 milionë nyje sulmuese
request_rate = 10_000  # 10,000 kërkesa për sekondë nga çdo nyje sulmuese
attack_duration = 60  # Sulmi zgjat 60 sekonda

# Llogaritjet kryesore
total_requests = calculate_total_requests(attack_nodes, request_rate, attack_duration)
processing_capacity = calculate_processing_capacity(total_nodes)
requests_handled = calculate_requests_handled(total_requests, processing_capacity, attack_duration)
requests_failed = total_requests - requests_handled

# Koha mesatare e përgjigjes
response_time_normal = calculate_response_times(1.10, 0.05)
response_time_ddos = calculate_response_times(1.50, 0.20)

# -------------------------
# 2️⃣ AI PROACTIVE & FIREWALL VETË-RIPARUES
# -------------------------
def calculate_ai_block(total_requests, base_block, prediction_factor, adaptive_learning_factor):
    ai_predicted_block = total_requests * (prediction_factor * base_block / 100)
    ai_dynamic_block_percentage = base_block + (adaptive_learning_factor * total_requests / 1e12)
    return ai_predicted_block, ai_dynamic_block_percentage

def calculate_firewall_block(requests_blocked_by_ai, firewall_efficiency):
    return requests_blocked_by_ai * (firewall_efficiency / 100)

# Parametrat e AI dhe Firewall
ai_detection_time = 0.5  # AI detekton sulmin për 0.5 sekonda
ai_base_block = 95  # AI bllokon 95% të sulmit, por mëson dhe adaptuohet
adaptive_learning_factor = 0.05  # Përmirësimi i AI bazuar në trafikun real
prediction_factor = 0.8  # AI ka një shans 80% për të parashikuar një sulm përpara se të ndodhë
firewall_hard_block_efficiency = 99.5  # Firewall bllokon 99.5% të IP-ve të dyshimta

# Llogaritjet e AI dhe Firewall
ai_predicted_block, ai_dynamic_block_percentage = calculate_ai_block(total_requests, ai_base_block, prediction_factor, adaptive_learning_factor)
requests_blocked_by_ai = total_requests * (ai_dynamic_block_percentage / 100)
requests_blocked_by_firewall = calculate_firewall_block(requests_blocked_by_ai, firewall_hard_block_efficiency)
requests_passed_after_defense = total_requests - requests_blocked_by_firewall

# -------------------------
# 3️⃣ TOKEN DINAMIK PËR TRANSAKSIONET
# -------------------------
def calculate_fraud_block(transaction_attempts, fraud_rate, rejection_rate):
    fraudulent_transactions = transaction_attempts * fraud_rate
    fraud_blocked = fraudulent_transactions * (rejection_rate / 100)
    fraud_passed = fraudulent_transactions - fraud_blocked
    return fraud_blocked, fraud_passed

# Parametrat e transaksioneve
transaction_attempts = 1_000_000  # 1 milionë transaksione në rrjet
fraud_rate = 0.001  # 0.1% janë të dyshimta
dynamic_token_rejection_rate = 99.9  # 99.9% e transaksioneve mashtruese refuzohen nga AI

# Llogaritjet e transaksioneve
fraud_blocked, fraud_passed = calculate_fraud_block(transaction_attempts, fraud_rate, dynamic_token_rejection_rate)

# -------------------------
# 4️⃣ RREGULLIMI AUTOMATIK I RRJETIT
# -------------------------
def calculate_traffic_balance(traffic_spikes, self_balancing_factor):
    overload_prevented = traffic_spikes * self_balancing_factor
    overload_unhandled = traffic_spikes - overload_prevented
    return overload_prevented, overload_unhandled

# Parametrat e trafikut
traffic_spikes = 10_000_000  # 10 milionë përdorues të rinj në sekondë
self_balancing_factor = 0.95  # 95% e trafikut të tepërt ridrejtohet automatikisht

# Llogaritjet e trafikut
overload_prevented, overload_unhandled = calculate_traffic_balance(traffic_spikes, self_balancing_factor)

# -------------------------
# 5️⃣ KOHA E PËRGJIGJES PAS TË GJITHA MBRONJËVE
# -------------------------
response_time_with_advanced_defense = calculate_response_times(1.05, 0.02)

# -------------------------
# 6️⃣ SHFAQJA E REZULTATEVE
# -------------------------
final_results = pd.DataFrame({
    "Parametri": ["Total Requests", "Requests Handled Before Defense", "Requests Failed",
                  "Requests Blocked by AI Proactive", "Requests Blocked by Firewall Inteligjent",
                  "Requests Passed After Adaptive Defense",
                  "Transactions Attempted", "Fraudulent Transactions",
                  "Fraud Blocked by Dynamic Token", "Fraud Passed",
                  "Traffic Spikes", "Traffic Self-Balanced", "Unbalanced Traffic",
                  "Response Time (Normal)", "Response Time (DDoS)", "Response Time After All Defenses"],
    "Vlera": [total_requests, requests_handled, requests_failed,
              requests_blocked_by_ai, requests_blocked_by_firewall, requests_passed_after_defense,
              transaction_attempts, transaction_attempts * fraud_rate,
              fraud_blocked, fraud_passed,
              traffic_spikes, overload_prevented, overload_unhandled,
              f"{np.mean(response_time_normal):.2f} ms",
              f"{np.mean(response_time_ddos):.2f} ms",
              f"{np.mean(response_time_with_advanced_defense):.2f} ms"]
})

tools.display_dataframe_to_user(name="Rezultatet e Përmirësuara të Web8", dataframe=final_results)

# -------------------------
# 7️⃣ VIZUALIZIMI I TË DHËNAVE
# -------------------------
plt.figure(figsize=(10, 5))
plt.hist(response_time_normal, bins=30, alpha=0.7, label="Para Sulmit (Normal)", color="blue")
plt.hist(response_time_ddos, bins=30, alpha=0.7, label="Gjatë Sulmit DDoS", color="red")
plt.hist(response_time_with_advanced_defense, bins=30, alpha=0.7, label="Pas AI Proactive & Self-Balancing", color="green")
plt.xlabel("Koha e Përgjigjes (ms)")
plt.ylabel("Frekuenca")
plt.title("Ndikimi i Sulmit DDoS dhe Mbrojtja Inteligjente e Web8")
plt.legend()
plt.show()

.footer {
  text-align: center;
  padding: 2rem;
  font-size: 0.9rem;
  color: #fff;
  background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
  border-top: 1px solid #444;
}

.footer-content {
  max-width: 800px;
  margin: 0 auto;
}

.footer-text {
  margin: 0;
  font-weight: bold;
}

.footer-subtext {
  margin: 0.5rem 0 0;
  font-size: 0.8rem;
  color: #ccc;
}