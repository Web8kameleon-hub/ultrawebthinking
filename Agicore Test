import { AGICore } from "../ai/agi/core";
import { monitor } from "../ai/agi/monitor";
import { ProcessedInput, MindState, ExecutionPlan } from "../types/agi.types";

jest.mock("../ai/agi/sense", () => ({
  processInput: jest.fn((input: string) => Promise.resolve({ text: input + " processed" })),
}));

jest.mock("../ai/agi/mind", () => ({
  initializeMind: jest.fn((state: MindState, sensed: ProcessedInput) => Promise.resolve({ ...state, thoughts: [sensed.text] })),
}));

jest.mock("../ai/agi/planner", () => ({
  planNextSteps: jest.fn((state: MindState) => Promise.resolve({ actions: ["reflect"] })),
}));

jest.mock("../ai/agi/response", () => ({
  generateResponse: jest.fn((state: MindState, plan: ExecutionPlan) => Promise.resolve("Kjo është përgjigjja.")),
}));

describe("AGICore", () => {
  const agi = new AGICore({ memoryPath: "memory.test.json" });

  test("run() duhet të përpunojë inputin dhe të kthejë një përgjigje", async () => {
    const response = await agi.run("Si je?");
    expect(response).toBe("Kjo është përgjigjja.");
  });

  test("run() duhet të regjistrojë të gjitha hapat në monitor", async () => {
    const logSpy = jest.spyOn(monitor, "log");
    await agi.run("Plani im?");
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining("AGI fillon"), expect.any(String), expect.anything());
    expect(logSpy).toHaveBeenCalledWith(expect.stringContaining("Përgjigja e gjeneruar"), expect.any(String));
  });
});
