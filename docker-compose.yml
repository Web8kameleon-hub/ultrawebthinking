version: '3.8'

services:
  ultrawebthinking:
    build:
      context: .
      dockerfile: Dockerfile
    image: ultrawebthinking:1.0.0
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    volumes:
      - .:/app
    restart: always
    networks:
      - ultraweb_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env

  db:
    image: postgres:14.5
    container_name: ultraweb_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - ultraweb_network

  redis:
    image: redis:6.2
    container_name: ultraweb_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ultraweb_network

  agi-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - MEMORY_PATH=/data/memory.json
    depends_on:
      - db

  agi-db:
    image: mongo:6
    container_name: agi-db
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  test-runner:
    build:
      context: .
    volumes:
      - .:/app
    command: yarn test

networks:
  ultraweb_network:

volumes:
  db_data:
  redis_data:
  mongo-data:

